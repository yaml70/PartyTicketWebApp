@model partywebapp.Models.Party

@{
    ViewData["Title"] = "Payment";
}

<head>
    <link rel="stylesheet" href="~/css/HomePage.css" />
    <style>
        body {
            background: black;
            min-height: 80vh;
            vertical-align: middle;
            display: flex
        }

        .card {
            left: -80px;
            width: 600px;
            padding: 3rem 3rem;
            box-shadow: 0 6px 20px 0 rgba(0, 0, 0, 0.19)
        }

        .mt-25 {
            margin-top: 25px
        }

        .mb-25 {
            margin-bottom: 25px
        }

        .card-title {
            font-weight: 700;
            font-size: 2.5em
        }

        .nav {
            display: flex
        }

            .nav ul {
                list-style-type: none;
                display: flex;
                padding-inline-start: unset;
                margin-bottom: 6vh
            }

            .nav li {
                padding: 1rem
            }

                .nav li a {
                    color: black;
                    text-decoration: none
                }

        .active {
            border-bottom: 2px solid black;
            font-weight: bold
        }

        input {
            border: none;
            outline: none;
            font-size: 1rem;
            font-weight: 600;
            color: #000;
            width: 100%;
            min-width: unset;
            background-color: transparent;
            border-color: transparent;
            margin: 0
        }

        form a {
            color: grey;
            text-decoration: none;
            font-size: 0.87rem;
            font-weight: bold
        }

            form a:hover {
                color: grey;
                text-decoration: none
            }

        form .row {
            margin: 0;
            overflow: hidden
        }

        form .row-1 {
            border: 1px solid rgba(0, 0, 0, 0.137);
            padding: 0.5rem;
            outline: none;
            width: 100%;
            min-width: unset;
            border-radius: 5px;
            background-color: rgba(221, 228, 236, 0.301);
            border-color: rgba(221, 228, 236, 0.459);
            margin: 2vh 0;
            overflow: hidden
        }

        form .row-2 {
            border: none;
            outline: none;
            background-color: transparent;
            margin: 0;
            padding: 0 0.8rem
        }

        form .row .row-2 {
            border: none;
            outline: none;
            background-color: transparent;
            margin: 0;
            padding: 0 0.8rem
        }

        form .row .col-2,
        .col-7,
        .col-3 {
            display: flex;
            align-items: center;
            text-align: center;
            padding: 0 1vh
        }

        form .row .col-2 {
            padding-right: 0
        }

        #card-header {
            font-weight: bold;
            font-size: 0.9rem
        }

        #card-inner {
            font-size: 0.7rem;
            color: gray
        }

        .three .col-7 {
            padding-left: 0
        }

        .three {
            overflow: hidden;
            justify-content: space-between
        }

            .three .col-2 {
                border: 1px solid rgba(0, 0, 0, 0.137);
                padding: 0.5rem;
                outline: none;
                width: 100%;
                min-width: unset;
                border-radius: 5px;
                background-color: rgba(221, 228, 236, 0.301);
                border-color: rgba(221, 228, 236, 0.459);
                margin: 2vh 0;
                width: fit-content;
                overflow: hidden
            }

                .three .col-2 input {
                    font-size: 0.7rem;
                    margin-left: 1vh
                }

        .btn {
            width: 100%;
            background-color: rgb(65, 202, 127);
            border-color: rgb(65, 202, 127);
            color: white;
            justify-content: center;
            padding: 2vh 0;
            margin-top: 3vh
        }

            .btn:focus {
                box-shadow: none;
                outline: none;
                box-shadow: none;
                color: white;
                -webkit-box-shadow: none;
                -webkit-user-select: none;
                transition: none
            }

            .btn:hover {
                color: white
            }

        input:focus::-webkit-input-placeholder {
            color: transparent
        }

        input:focus:-moz-placeholder {
            color: transparent
        }

        input:focus::-moz-placeholder {
            color: transparent
        }

        input:focus:-ms-input-placeholder {
            color: transparent
        }

        .paint-canvas {
            border: 1px black solid;
            display: block;
            margin: 0rem;
        }

        .color-picker {
            margin: 1rem 1rem 0 1rem;
        }
    </style>
</head>
<body>
    <div class="card mt-25 mb-25">
        <div class="card-title mx-auto text-center">
            <h2 style="font-size: 35px;">@Model.name Tickets</h2>
        </div>
        <form asp-action="Payment">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <span id="card-header">Count Of Ticket's:</span>
            <div class="row row-1">
                <div class="col-2"> </div>
                <div class="col-5"> <input name="numOfTickets" placeholder="" type="number"> </div>
                <div class="text-black-50 col-5" style="color:forestgreen; margin-top:2px;">
                    @Html.DisplayFor(Model => Model.price) ILS For Each
                </div>
            </div> <span id="card-header" class="text-black-50">Add new card:</span>
            <div class="row-1">
                <div class="row row-2"> <span id="card-inner">Card holder name</span> </div>
                <div class="row row-2"> <input type="text" placeholder="Please enter full name"> </div>
            </div>
            <div class="row three">
                <div class="col-7">
                    <div class="row-1">
                        <div class="row row-2"> <span id="card-inner">Card number</span> </div>
                        <div class="row row-2"> <input type="text" placeholder=""> </div>
                    </div>
                </div>
                <div class="col-2"> <input type="text" placeholder="Exp. date"> </div>
                <div class="col-2"> <input type="text" placeholder="CVV"> </div>

                <h4>Please Signiture</h4>
                <canvas class="js-paint  paint-canvas" width="500" height="150"></canvas>
                <input hidden="hidden" type="color" class="js-color-picker  color-picker">
                <input hidden="hidden" type="range" class="js-line-range" min="1" max="72" value="1">
            </div> <input class="btn d-flex mx-auto" type="submit" value="Confirm Payment" />

        </form>
    </div>
</body>
<script>
    const paintCanvas = document.querySelector('.js-paint');
    const context = paintCanvas.getContext('2d');
    context.lineCap = 'round';

    const colorPicker = document.querySelector('.js-color-picker');

    colorPicker.addEventListener('change', event => {
        context.strokeStyle = event.target.value;
    });

    const lineWidthRange = document.querySelector('.js-line-range');
    const lineWidthLabel = document.querySelector('.js-range-value');

    lineWidthRange.addEventListener('input', event => {
        const width = event.target.value;
        lineWidthLabel.innerHTML = width;
        context.lineWidth = width;
    });

    let x = 0, y = 0;
    let isMouseDown = false;

    const stopDrawing = () => { isMouseDown = false; }
    const startDrawing = event => {
        isMouseDown = true;
        [x, y] = [event.offsetX, event.offsetY];
    }
    const drawLine = event => {
        if (isMouseDown) {
            const newX = event.offsetX;
            const newY = event.offsetY;
            context.beginPath();
            context.moveTo(x, y);
            context.lineTo(newX, newY);
            context.stroke();
            x = newX;
            y = newY;
        }
    }

    paintCanvas.addEventListener('mousedown', startDrawing);
    paintCanvas.addEventListener('mousemove', drawLine);
    paintCanvas.addEventListener('mouseup', stopDrawing);
    paintCanvas.addEventListener('mouseout', stopDrawing);
</script>
